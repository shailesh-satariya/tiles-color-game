{"version":3,"sources":["../../common/dist/helpers/utils.js","../../common/dist/types/index.js","../../common/dist/index.js","../../common/dist/helpers/index.js","../../common/dist/helpers/ai.js","redux/action-types/index.ts","redux/actions/index.ts","components/color-picker.tsx","components/game-grid.tsx","components/game-history.tsx","config/index.ts","components/min-max-select.tsx","components/nav-bar.tsx","components/toast-message.tsx","pages/game.tsx","App.tsx","redux/reducers/ai-moves-reducer.ts","redux/reducers/colors-reducer.ts","redux/reducers/game-state-reducer.ts","redux/reducers/grid-reducer.ts","redux/reducers/initial-grid-reducer.ts","redux/reducers/moves-reducer.ts","redux/reducers/next-move-reducer.ts","redux/reducers/server-error-reducer.ts","redux/reducers/index.ts","redux/store/index.ts","serviceWorker.ts","index.tsx"],"names":["Object","defineProperty","exports","value","convertNumberedArrayToGrid","convertGridToNumberedArray","getTile","getNeighbours","getNeighboursPositions","isTraversed","getColors","getRandomColor","traverse","createGrid","getRandomInteger","cloneGrid","AllColors","types_1","require","values","TileColor","filter","v","isNaN","min","max","Math","floor","random","maxColors","slice","length","colors","rows","columns","grid","Array","from","map","color","traversed","row","_a","x","y","reduce","tiles","position","tile","push","clonedGrid","visited","checkForTraverse","key","gridTraverse","_i","positions_1","grid_1","row_1","gridArr","GameState","__createBinding","this","create","o","m","k","k2","undefined","enumerable","get","__exportStar","p","prototype","hasOwnProperty","call","getHeuristicColor","getHeuristic","solveNextMove","solveGame","utils_1","v1","v2","currentGrid","i","j","nextColor","colorSet","Set","neighbours_1","neighbour","add","minHeuristic","Number","MAX_SAFE_INTEGER","sort","c1","c2","indexOf","colors_1","newGrid","heuristic","NEW_GAME","ADD_MOVE","SOLVED","AUTO_SOLVE","AUTO_SOLVED","SOLVE_NEXT_MOVE","SOLVE_GAME","SERVER_ERROR","NO_SERVER_ERROR","addMove","dispatch","getState","gameState","type","payload","solveNextMoveDispatch","nextMove","Promise","resolve","solveNextMoveFn","solveNextMoveAI","autoSolveDispatch","aiMoves","autoSolver","counter","inst","setInterval","clearInterval","solveGameAI","solveGameDispatch","initialGrid","solveGameFn","ColorPicker","connect","connector","props","currentColor","data-test","className","ti","Fragment","disabled","IN_PROGRESS","onClick","GameGrid","style","gridTemplateRows","gridTemplateColumns","ri","GameHistory","moves","currGrid","hGrids","hGrid","index","CONFIG","minRows","maxRows","minColumns","maxColumns","colorsCnt","minColorsCnt","maxColorsCnt","MinMaxSelect","label","onChange","React","useState","setValues","useEffect","_","event","parseInt","target","NavBar","newGame","autoSolve","rowsVal","setRows","columnsVal","setColumns","colorsCntVal","setColorsCnt","isNavBarCollapsed","setNavBarCollapsed","bDisabled","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","newColors","startGameHandler","NOT_STARTED","ToastMessage","header","body","onClose","role","aria-live","aria-atomic","right","bottom","minWidth","zIndex","data-dismiss","aria-hidden","Game","alertRef","useRef","historyRef","bSolved","setTimeout","current","scrollIntoView","behavior","ref","App","serverError","setNoServerError","initialState","AiMovesReducer","state","action","ColorsReducer","GameStateReducer","GridReducer","InitialGridReducer","MovesReducer","NextMoveReducer","ServerErrorReducer","combineReducers","middlewares","ReduxThunk","store","applyMiddleware","createStore","createStoreWithMiddleware","rootReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4dbf4f64.chunk.js","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.convertNumberedArrayToGrid = exports.convertGridToNumberedArray = exports.getTile = exports.getNeighbours = exports.getNeighboursPositions = exports.isTraversed = exports.getColors = exports.getRandomColor = exports.traverse = exports.createGrid = exports.getRandomInteger = exports.cloneGrid = exports.AllColors = void 0;\r\nvar types_1 = require(\"../types\");\r\n/**\r\n * All valid colors as numbers\r\n */\r\nvar AllColors = ((Object.values(types_1.TileColor)).filter(function (v) { return !isNaN(v); }));\r\nexports.AllColors = AllColors;\r\n/**\r\n * Returns a random number between a given range\r\n * @function getRandomInteger\r\n *\r\n * @param {number} min\r\n * @param {number} max\r\n *\r\n * @return {number}\r\n */\r\nvar getRandomInteger = function (min, max) {\r\n    return Math.floor(Math.random() * (max - min) + min);\r\n};\r\nexports.getRandomInteger = getRandomInteger;\r\n/**\r\n * Gets colors array\r\n * @function getColors\r\n *\r\n * @param {number} maxColors\r\n *\r\n * @return {TileColor[]}\r\n */\r\nvar getColors = function (maxColors) {\r\n    return AllColors.slice(0, Math.max(3, Math.min(AllColors.length, maxColors)));\r\n};\r\nexports.getColors = getColors;\r\n/**\r\n * returns a random color from an array of colors\r\n * @function getRandomColor\r\n *\r\n * @param {TileColor[]} colors\r\n *\r\n * @return {TileColor}\r\n */\r\nvar getRandomColor = function (colors) {\r\n    return colors[Math.floor(Math.random() * colors.length)];\r\n};\r\nexports.getRandomColor = getRandomColor;\r\n/**\r\n * Creates grid for new game\r\n * @function createGrid\r\n *\r\n * @param {number} rows\r\n * @param {number} columns\r\n * @param {TileColor[]} colors\r\n *\r\n * @return {TileGrid}\r\n */\r\nvar createGrid = function (rows, columns, colors) {\r\n    var grid = Array.from({ length: rows }).map(function () {\r\n        return Array.from({ length: columns }).map(function () { return ({\r\n            color: colors[Math.floor(Math.random() * colors.length)],\r\n            traversed: false\r\n        }); });\r\n    });\r\n    return traverse(grid, grid[0][0].color);\r\n};\r\nexports.createGrid = createGrid;\r\n/**\r\n * Clones the given grid\r\n * @function cloneGrid\r\n *\r\n * @param {TileGrid} grid\r\n *\r\n * @return {TileGrid}\r\n */\r\nvar cloneGrid = function (grid) { return grid.map(function (row) {\r\n    return row.map(function (_a) {\r\n        var color = _a.color, traversed = _a.traversed;\r\n        return ({ color: color, traversed: traversed });\r\n    });\r\n}); };\r\nexports.cloneGrid = cloneGrid;\r\n/**\r\n * Gets tile at given position\r\n * @function getTile\r\n * @param {TileGrid} grid\r\n * @param {number} x\r\n * @param {number} y\r\n *\r\n * @return {Tile | null}\r\n */\r\nvar getTile = function (grid, x, y) {\r\n    return grid[x] && grid[x][y] ? grid[x][y] : null;\r\n};\r\nexports.getTile = getTile;\r\n/**\r\n * returns neighbours position\r\n * @function getNeighboursPositions\r\n *\r\n * @param {number} x\r\n * @param {number} y\r\n *\r\n * @return {TileGridPosition[]}\r\n */\r\nvar getNeighboursPositions = function (x, y) {\r\n    return [\r\n        { x: x - 1, y: y },\r\n        { x: x, y: y + 1 },\r\n        { x: x + 1, y: y },\r\n        { x: x, y: y - 1 } // Left\r\n    ];\r\n};\r\nexports.getNeighboursPositions = getNeighboursPositions;\r\n/**\r\n * Gets neighbours of given position\r\n * @function getNeighbours\r\n *\r\n * @param {TileGrid} grid\r\n * @param {number} x\r\n * @param {number} y\r\n *\r\n * @return {Tile | null}\r\n */\r\nvar getNeighbours = function (grid, x, y) {\r\n    var positions = getNeighboursPositions(x, y);\r\n    return positions.reduce(function (tiles, position) {\r\n        var tile = getTile(grid, position.x, position.y);\r\n        if (tile) {\r\n            tiles.push(tile);\r\n        }\r\n        return tiles;\r\n    }, []);\r\n};\r\nexports.getNeighbours = getNeighbours;\r\n/**\r\n * Traversed the grid with give color\r\n * @function traverse\r\n *\r\n * @param {TileGrid} grid\r\n * @param {TileColor} color\r\n *\r\n * @return {TileGrid}\r\n */\r\nvar traverse = function (grid, color) {\r\n    var clonedGrid = cloneGrid(grid);\r\n    var visited = {};\r\n    var checkForTraverse = function (x, y) {\r\n        var key = x + \"-\" + y;\r\n        if (visited[key]) {\r\n            return;\r\n        }\r\n        visited[key] = true;\r\n        var tile = getTile(grid, x, y);\r\n        if (!tile) {\r\n            return;\r\n        }\r\n        if ((tile.color === color) !== tile.traversed) {\r\n            gridTraverse(x, y);\r\n        }\r\n    };\r\n    var gridTraverse = function (x, y) {\r\n        var tile = getTile(clonedGrid, x, y);\r\n        if (!tile) {\r\n            return;\r\n        }\r\n        if (tile.color === color) {\r\n            tile.traversed = true;\r\n        }\r\n        if (tile.traversed) {\r\n            tile.color = color;\r\n        }\r\n        var positions = getNeighboursPositions(x, y);\r\n        for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {\r\n            var position = positions_1[_i];\r\n            checkForTraverse(position.x, position.y);\r\n        }\r\n    };\r\n    checkForTraverse(0, 0);\r\n    return clonedGrid;\r\n};\r\nexports.traverse = traverse;\r\n/**\r\n * Checks whether grid is fully traversed on not\r\n * @function isTraversed\r\n *\r\n * @param {TileGrid} grid\r\n *\r\n * @return {boolean}\r\n */\r\nvar isTraversed = function (grid) {\r\n    for (var _i = 0, grid_1 = grid; _i < grid_1.length; _i++) {\r\n        var row = grid_1[_i];\r\n        for (var _a = 0, row_1 = row; _a < row_1.length; _a++) {\r\n            var tile = row_1[_a];\r\n            if (!tile.traversed) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n};\r\nexports.isTraversed = isTraversed;\r\n/**\r\n * Converts TileGrid to 2D numbered Array\r\n * @function convertGridToNumberedArray\r\n *\r\n * @param {TileGrid} grid\r\n *\r\n * @return {number[][]}\r\n */\r\nvar convertGridToNumberedArray = function (grid) { return grid.map(function (row) {\r\n    return row.map(function (tile) { return tile.color; });\r\n}); };\r\nexports.convertGridToNumberedArray = convertGridToNumberedArray;\r\n/**\r\n * Converts 2D numbered Array to TileGrid\r\n * @function convertNumberedArrayToGrid\r\n *\r\n * @param {number[][]} gridArr\r\n *\r\n * @return {TileGrid}\r\n */\r\nvar convertNumberedArrayToGrid = function (gridArr) {\r\n    var grid = gridArr.map(function (row) {\r\n        return row.map(function (color) { return ({\r\n            color: color,\r\n            traversed: false\r\n        }); });\r\n    });\r\n    return traverse(grid, grid[0][0].color);\r\n};\r\nexports.convertNumberedArrayToGrid = convertNumberedArrayToGrid;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TileColor = exports.GameState = void 0;\r\nvar GameState;\r\n(function (GameState) {\r\n    GameState[\"NOT_STARTED\"] = \"NOT_STARTED\";\r\n    GameState[\"IN_PROGRESS\"] = \"IN_PROGRESS\";\r\n    GameState[\"AUTO_SOLVE\"] = \"AUTO_SOLVE\";\r\n    GameState[\"SOLVED\"] = \"SOLVED\";\r\n    GameState[\"AUTO_SOLVED\"] = \"AUTO_SOLVED\";\r\n})(GameState = exports.GameState || (exports.GameState = {}));\r\nvar TileColor;\r\n(function (TileColor) {\r\n    TileColor[TileColor[\"COLOR1\"] = 1] = \"COLOR1\";\r\n    TileColor[TileColor[\"COLOR2\"] = 2] = \"COLOR2\";\r\n    TileColor[TileColor[\"COLOR3\"] = 3] = \"COLOR3\";\r\n    TileColor[TileColor[\"COLOR4\"] = 4] = \"COLOR4\";\r\n    TileColor[TileColor[\"COLOR5\"] = 5] = \"COLOR5\";\r\n    TileColor[TileColor[\"COLOR6\"] = 6] = \"COLOR6\";\r\n    TileColor[TileColor[\"COLOR7\"] = 7] = \"COLOR7\";\r\n    TileColor[TileColor[\"COLOR8\"] = 8] = \"COLOR8\";\r\n})(TileColor = exports.TileColor || (exports.TileColor = {}));\r\n","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__exportStar(require(\"./helpers\"), exports);\r\n__exportStar(require(\"./types\"), exports);\r\n","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__exportStar(require(\"./ai\"), exports);\r\n__exportStar(require(\"./utils\"), exports);\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.getHeuristicColor = exports.getHeuristic = exports.solveNextMove = exports.solveGame = void 0;\r\nvar utils_1 = require(\"./utils\");\r\n/**\r\n * Gets remaining untraversed tiles count value\r\n * @function getHeuristic\r\n *\r\n * @param {TileGrid} grid\r\n *\r\n * @return {number}\r\n */\r\nvar getHeuristic = function (grid) { return grid.reduce(function (v1, row) {\r\n    return v1 + row.reduce(function (v2, tile) { return (v2 + (!tile.traversed ? 1 : 0)); }, 0);\r\n}, 0); };\r\nexports.getHeuristic = getHeuristic;\r\n/**\r\n * Gets remaining untraversed tiles count value for given color\r\n * @function getHeuristicColor\r\n *\r\n * @param {TileGrid} grid\r\n * @param {TileColor} color\r\n *\r\n * @return {number}\r\n */\r\nvar getHeuristicColor = function (grid, color) { return grid.reduce(function (v1, row) {\r\n    return v1 + row.reduce(function (v2, tile) { return (v2 + ((!tile.traversed && tile.color === color) ? 1 : 0)); }, 0);\r\n}, 0); };\r\nexports.getHeuristicColor = getHeuristicColor;\r\n/**\r\n * Solves the game and returns the color moves\r\n * @function solveGame\r\n *\r\n * @param {TileGrid} grid\r\n *\r\n * @return {TileColor[]}\r\n */\r\nvar solveGame = function (grid) {\r\n    var colors = [];\r\n    var currentGrid = grid;\r\n    while (!utils_1.isTraversed(currentGrid)) {\r\n        var color = solveNextMove(currentGrid);\r\n        if (color === null) {\r\n            break;\r\n        }\r\n        colors.push(color);\r\n        currentGrid = utils_1.traverse(currentGrid, color);\r\n    }\r\n    return colors;\r\n};\r\nexports.solveGame = solveGame;\r\n/**\r\n * Solves next color move\r\n * @function solveNextMove\r\n *\r\n * @param {TileGrid} grid\r\n *\r\n * @return {TileColor|null}\r\n */\r\nvar solveNextMove = function (grid) {\r\n    var nextColor = null;\r\n    // Gets the neighbours of traversed\r\n    var colorSet = new Set();\r\n    var i, j;\r\n    for (i = 0; i < grid.length; i++) {\r\n        for (j = 0; j < grid[i].length; j++) {\r\n            var tile = grid[i][j];\r\n            if (tile.traversed) {\r\n                var neighbours = utils_1.getNeighbours(grid, i, j);\r\n                for (var _i = 0, neighbours_1 = neighbours; _i < neighbours_1.length; _i++) {\r\n                    var neighbour = neighbours_1[_i];\r\n                    if (!neighbour.traversed) {\r\n                        colorSet.add(neighbour.color);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Find the color with min heuristic\r\n    var color;\r\n    var minHeuristic = Number.MAX_SAFE_INTEGER;\r\n    // Prioritize the colors\r\n    var colors = Array.from(colorSet.values());\r\n    colors.sort(function (c1, c2) { return utils_1.AllColors.indexOf(c1) - utils_1.AllColors.indexOf(c2); });\r\n    for (var _a = 0, colors_1 = colors; _a < colors_1.length; _a++) {\r\n        color = colors_1[_a];\r\n        var newGrid = utils_1.traverse(grid, color);\r\n        // Select the color if its heuristic is 0\r\n        if (getHeuristicColor(newGrid, color) === 0) {\r\n            return color;\r\n        }\r\n        var heuristic = getHeuristic(newGrid);\r\n        if (heuristic === 0) {\r\n            return color;\r\n        }\r\n        else if (heuristic < minHeuristic) {\r\n            nextColor = color;\r\n            minHeuristic = heuristic;\r\n        }\r\n    }\r\n    return nextColor;\r\n};\r\nexports.solveNextMove = solveNextMove;\r\n","import {TileColor, TileGrid} from \"common\";\r\n\r\nexport const NEW_GAME = \"NEW_GAME\";\r\nexport const ADD_MOVE = \"ADD_MOVE\";\r\nexport const SOLVED = \"SOLVED\";\r\nexport const AUTO_SOLVE = \"AUTO_SOLVE\";\r\nexport const AUTO_SOLVED = \"AUTO_SOLVED\";\r\nexport const SOLVE_NEXT_MOVE = \"SOLVE_NEXT_MOVE\";\r\nexport const SOLVE_GAME = \"SOLVE_GAME\";\r\nexport const SERVER_ERROR = \"SERVER_ERROR\";\r\nexport const NO_SERVER_ERROR = \"NO_SERVER_ERROR\";\r\n\r\ninterface DefaultAction {\r\n    type: undefined | null;\r\n}\r\n\r\ninterface StartGameAction {\r\n    type: typeof NEW_GAME;\r\n    payload: {\r\n        colors: TileColor[];\r\n        grid: TileGrid;\r\n    };\r\n}\r\n\r\ninterface AddMoveAction {\r\n    type: typeof ADD_MOVE;\r\n    payload: {\r\n        color: TileColor;\r\n        grid: TileGrid;\r\n    };\r\n}\r\n\r\ninterface SolveNextMoveAction {\r\n    type: typeof SOLVE_NEXT_MOVE;\r\n    payload: {\r\n        color: TileColor;\r\n    };\r\n}\r\n\r\ninterface SolveGameAction {\r\n    type: typeof SOLVE_GAME;\r\n    payload: {\r\n        colors: TileColor[];\r\n    };\r\n}\r\n\r\ninterface ServerErrorAction {\r\n    type: typeof SERVER_ERROR;\r\n}\r\n\r\ninterface NoServerErrorAction {\r\n    type: typeof NO_SERVER_ERROR;\r\n}\r\n\r\ninterface SolvedAction {\r\n    type: typeof SOLVED;\r\n}\r\n\r\ninterface AutoSolveAction {\r\n    type: typeof AUTO_SOLVE;\r\n}\r\n\r\ninterface AutoSolvedAction {\r\n    type: typeof AUTO_SOLVED;\r\n}\r\n\r\nexport type GameActions =\r\n    DefaultAction\r\n    | StartGameAction\r\n    | AddMoveAction\r\n    | SolveNextMoveAction\r\n    | SolveGameAction\r\n    | ServerErrorAction\r\n    | NoServerErrorAction\r\n    | SolvedAction\r\n    | AutoSolveAction\r\n    | AutoSolvedAction;\r\n","import {AxiosResponse} from \"axios\";\r\nimport {\r\n    GameState,\r\n    isTraversed,\r\n    solveGame as solveGameAI,\r\n    solveNextMove as solveNextMoveAI,\r\n    TileColor,\r\n    TileGrid,\r\n    traverse\r\n} from \"common\";\r\nimport {AnyAction, Dispatch} from \"redux\";\r\nimport * as Services from \"../../services\";\r\n\r\nimport {\r\n    ADD_MOVE,\r\n    AUTO_SOLVE,\r\n    AUTO_SOLVED,\r\n    NEW_GAME,\r\n    NO_SERVER_ERROR,\r\n    SERVER_ERROR,\r\n    SOLVE_GAME,\r\n    SOLVE_NEXT_MOVE,\r\n    SOLVED\r\n} from \"../action-types\";\r\nimport {RootState} from \"../store\";\r\n\r\n/**\r\n * Returns Redux Thunk function that dispatches NEW_GAME action\r\n *     and (conditionally) SOLVED | AUTO_SOLVED action\r\n * @function newGame\r\n *\r\n * @param {TileGrid} grid - new grid.\r\n * @param {colors} colors set\r\n *\r\n * @returns {function} - Redux Thunk function.\r\n */\r\nexport const newGame = (grid: TileGrid, colors: TileColor[]) => (dispatch: Dispatch) => {\r\n    dispatch({\r\n        type: NEW_GAME,\r\n        payload: {grid, colors}\r\n    });\r\n\r\n    if (isTraversed(grid)) {\r\n        dispatch({\r\n            type: SOLVED,\r\n            payload: grid\r\n        });\r\n    }\r\n};\r\n\r\n/**\r\n * Returns Redux Thunk function that dispatches ADD_MOVE action\r\n *     and (conditionally) SOLVED | AUTO_SOLVED action\r\n * @function addMove\r\n *\r\n * @param {TileColor} color - tile color.\r\n * @returns {function} - Redux Thunk function.\r\n */\r\nexport const addMove = (color: TileColor) => (dispatch: Dispatch, getState: () => RootState) => {\r\n    const {grid: currentGrid, gameState}: RootState = getState();\r\n    const grid: TileGrid | null = currentGrid ? traverse(currentGrid, color) : null;\r\n\r\n    dispatch({\r\n        type: ADD_MOVE,\r\n        payload: {\r\n            color, grid\r\n        }\r\n    });\r\n\r\n    if (grid && isTraversed(grid)) {\r\n        dispatch({\r\n            type: (gameState === GameState.AUTO_SOLVE) ? AUTO_SOLVED : SOLVED,\r\n            payload: grid\r\n        });\r\n    }\r\n};\r\n\r\n/**\r\n * Returns Redux Thunk function that dispatches NO_SERVER_ERROR action\r\n * @function setNoServerError\r\n *\r\n * @returns {function} - Redux Thunk function.\r\n */\r\nexport const setNoServerError = () => (dispatch: Dispatch) => {\r\n    dispatch({type: NO_SERVER_ERROR})\r\n};\r\n\r\n/**\r\n * Dispatch axios action to solve the game.\r\n * @function solveNextMoveDispatch\r\n * @param {dispatch} dispatch - Redux Thunk dispatch.\r\n * @param {() => RootState}  getState\r\n *\r\n * @return Promise\r\n */\r\nexport const solveNextMoveDispatch = (dispatch: Dispatch, getState: () => RootState): Promise<any> => {\r\n    const {grid, nextMove}: RootState = getState();\r\n\r\n    if (grid === null || nextMove !== null) {\r\n        return new Promise(resolve => {\r\n        });\r\n    }\r\n\r\n    const solveNextMoveFn = (color: TileColor | null): void => {\r\n        if (color) {\r\n            dispatch({\r\n                type: SOLVE_NEXT_MOVE,\r\n                payload: {\r\n                    color\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    if (process.env.REACT_APP_WITHOUT_API === \"1\") {\r\n        const color: TileColor | null = grid ? solveNextMoveAI(grid) : null;\r\n        return new Promise(resolve => solveNextMoveFn(color));\r\n    }\r\n\r\n    return Services.solveNextMove(grid).then((response: AxiosResponse) => {\r\n        solveNextMoveFn(response.data.color);\r\n    }).catch(() => {\r\n        dispatch({type: SERVER_ERROR});\r\n    });\r\n};\r\n\r\n/**\r\n * Dispatch axios action to solve the game.\r\n * @function autoSolveDispatch\r\n * @param {dispatch} dispatch - Redux Thunk dispatch.\r\n * @param {() => RootState}  getState\r\n *\r\n * @return Promise\r\n */\r\nexport const autoSolveDispatch = (dispatch: Dispatch, getState: () => RootState): Promise<any> => {\r\n    const {grid: currentGrid, aiMoves}: RootState = getState();\r\n\r\n    if (currentGrid === null) {\r\n        return new Promise(resolve => {\r\n        });\r\n    }\r\n\r\n    const autoSolver = (colors: TileColor[] | null): void => {\r\n        if (colors === null || !colors.length) {\r\n            return;\r\n        }\r\n\r\n        dispatch({\r\n            type: AUTO_SOLVE\r\n        });\r\n\r\n        let counter: number = 0;\r\n        let inst: NodeJS.Timeout = setInterval((): void => {\r\n            const color: TileColor = colors[counter];\r\n            counter++;\r\n            if (counter >= colors.length) {\r\n                clearInterval(inst);\r\n            }\r\n\r\n            dispatch(addMove(color) as any as AnyAction);\r\n        }, 1000);\r\n    };\r\n\r\n    if (process.env.REACT_APP_WITHOUT_API === \"1\") {\r\n        const colors: TileColor[] | null = (currentGrid && !aiMoves) ? solveGameAI(currentGrid) : null;\r\n        return new Promise(() => autoSolver(colors));\r\n    }\r\n\r\n    return Services.solveGame(currentGrid).then((response: AxiosResponse) => {\r\n        autoSolver(response.data.colors);\r\n    }).catch(() => {\r\n        dispatch({type: SERVER_ERROR});\r\n    });\r\n};\r\n\r\n/**\r\n * Dispatch axios action to solve the game.\r\n * @function solveGameDispatch\r\n * @param {dispatch} dispatch - Redux Thunk dispatch.\r\n * @param {() => RootState}  getState\r\n *\r\n * @return Promise\r\n */\r\nconst solveGameDispatch = (dispatch: Dispatch, getState: () => RootState): Promise<any> => {\r\n    const {initialGrid, aiMoves}: RootState = getState();\r\n\r\n    if (initialGrid === null || aiMoves !== null) {\r\n        return new Promise(resolve => {\r\n        });\r\n    }\r\n\r\n    const solveGameFn = (colors: TileColor[] | null): void => {\r\n        if (colors && colors.length) {\r\n            dispatch({\r\n                type: SOLVE_GAME,\r\n                payload: {\r\n                    colors\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    if (process.env.REACT_APP_WITHOUT_API === \"1\") {\r\n        const colors: TileColor[] | null = solveGameAI(initialGrid);\r\n        return new Promise(() => solveGameFn(colors));\r\n\r\n    }\r\n\r\n    return Services.solveGame(initialGrid).then((response: AxiosResponse) => {\r\n        solveGameFn(response.data.colors);\r\n    }).catch(() => {\r\n        dispatch({type: SERVER_ERROR});\r\n    });\r\n};\r\n\r\n/**\r\n * Returns Redux Thunk function that dispatches AUTO_SOLVE action\r\n *     after axios promise resolves\r\n * @function autoSolve\r\n * @returns {function} - Redux Thunk function.\r\n */\r\nexport const autoSolve = () => {\r\n    return autoSolveDispatch;\r\n}\r\n\r\n/**\r\n * Returns Redux Thunk function that dispatches AUTO_SOLVE action\r\n *     after axios promise resolves\r\n * @function solveNextMove\r\n * @returns {function} - Redux Thunk function.\r\n */\r\nexport const solveNextMove = () => {\r\n    return solveNextMoveDispatch;\r\n}\r\n\r\n/**\r\n * Returns Redux Thunk function that dispatches SOLVE_GAME action\r\n *     after axios promise resolves\r\n * @function solveGame\r\n * @returns {function} - Redux Thunk function.\r\n */\r\nexport const solveGame = () => {\r\n    return solveGameDispatch;\r\n}\r\n\r\n\r\n","import {GameState, TileColor} from \"common\";\r\nimport React from \"react\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\nimport {addMove} from \"../redux/actions\";\r\nimport {RootState} from \"../redux/store\";\r\n\r\n\r\nconst mapStateToProps = ({grid, colors, nextMove, gameState}: RootState) => ({\r\n    grid, colors, nextMove, gameState\r\n});\r\n\r\nconst connector = connect(mapStateToProps, {addMove});\r\n\r\nexport type ColorPickerProps = ConnectedProps<typeof connector>;\r\n\r\n/**\r\n * Color picker component\r\n * @function DisconnectedColorPicker\r\n *\r\n * @param {ColorPickerProps} props\r\n * @constructor\r\n *\r\n * @return {JSX.Element}\r\n */\r\nexport const DisconnectedColorPicker = (props: ColorPickerProps): JSX.Element => {\r\n    const {grid, colors, gameState, nextMove, addMove}: ColorPickerProps = props;\r\n    const currentColor: TileColor | null = (grid && grid.length && grid[0].length) ? grid[0][0].color : null;\r\n\r\n    return (\r\n        <div data-test=\"component-color-picker\" className=\"mt-1\">\r\n            {\r\n                colors.map((color: TileColor, ti: number) => (\r\n                    <React.Fragment key={ti}>\r\n                        {\r\n                            <button data-test={\"color-picker\"}\r\n                                    className={`color-picker-button color${color}` + (nextMove === color ? \" next-move\" : \"\")}\r\n                                    disabled={gameState !== GameState.IN_PROGRESS || color === currentColor}\r\n                                    onClick={() => addMove(color)}/>\r\n                        }\r\n                    </React.Fragment>\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nconst ColorPicker = connector(DisconnectedColorPicker);\r\n\r\nexport default ColorPicker;\r\n","import {Tile, TileGrid, TileRow} from \"common\";\r\nimport React, {CSSProperties} from \"react\";\r\n\r\nexport interface GameGridProps {\r\n    grid: TileGrid;\r\n}\r\n\r\n/**\r\n * GameGrid component - renderers game board\r\n * @function GameGrid\r\n *\r\n * @param {GameGridProps} props\r\n * @constructor\r\n *\r\n * @return {JSX.Element}\r\n */\r\nconst GameGrid = (props: GameGridProps): JSX.Element => {\r\n    const {grid} = props;\r\n\r\n    const style: CSSProperties = {\r\n        gridTemplateRows: `repeat(${grid.length}, 1fr)`,\r\n        gridTemplateColumns: `repeat(${grid[0].length}, 1fr)`\r\n    };\r\n\r\n    return (\r\n        <div className=\"game-grid-container\">\r\n            <div className=\"game-grid-wrapper\">\r\n                <div data-test=\"component-game-grid\" className=\"game-grid\" style={style}>\r\n                    {\r\n                        grid.map((row: TileRow, ri: number) => (\r\n                            row.map((tile: Tile, ti: number) => (\r\n                                <div data-test=\"grid-tile\" key={`${ri}-${ti}`}\r\n                                     className={(`grid-tile color${tile.color} ` + (tile.traversed ? \"traversed\" : \"untraversed\"))}/>\r\n                            ))\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameGrid;\r\n","import {TileColor, TileGrid, traverse} from \"common\";\r\nimport React from \"react\";\r\nimport GameGrid from \"./game-grid\";\r\n\r\nexport interface GameHistoryProps {\r\n    grid: TileGrid;\r\n    moves: TileColor[]\r\n}\r\n\r\n/**\r\n * GameHistory component -  renders history\r\n * @function GameHistory\r\n *\r\n * @param {GameHistoryProps} props\r\n * @constructor\r\n *\r\n * @return {JSX.Element}\r\n */\r\nconst GameHistory = (props: GameHistoryProps): JSX.Element => {\r\n    const {grid, moves}: GameHistoryProps = props;\r\n\r\n    let currGrid: TileGrid = grid;\r\n    const hGrids: TileGrid[] = moves.map((color: TileColor) => {\r\n        let newGrid: TileGrid = traverse(currGrid, color);\r\n        currGrid = newGrid;\r\n\r\n        return newGrid;\r\n    });\r\n\r\n    return (\r\n        <div data-test=\"component-game-history\" className=\"text-center\">\r\n            <div className=\"mb-3\">\r\n                <GameGrid data-test=\"history-grid\" grid={grid}/>\r\n            </div>\r\n            {\r\n                hGrids.map((hGrid: TileGrid, index: number) => (\r\n                    <React.Fragment key={index}>\r\n                        <button data-test=\"history-tile\"\r\n                                className={`color${hGrid[0][0].color} color-picker-button mb-3`}/>\r\n                        <div className=\"mb-3\">\r\n                            <GameGrid data-test=\"history-grid\" grid={hGrid}/>\r\n                        </div>\r\n                    </React.Fragment>\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameHistory;\r\n","const CONFIG: Record<string, number> = {\r\n    rows: 6,\r\n    minRows: 3,\r\n    maxRows: 12,\r\n\r\n    columns: 6,\r\n    minColumns: 3,\r\n    maxColumns: 12,\r\n\r\n    colorsCnt: 4,\r\n    minColorsCnt: 3,\r\n    maxColorsCnt: 8,\r\n};\r\n\r\nexport default CONFIG;\r\n","import React from \"react\";\r\n\r\nexport interface MinMaxSelectProps {\r\n    min: number;\r\n    max: number;\r\n    value: number;\r\n    label: string;\r\n    onChange: (val: number) => void;\r\n}\r\n\r\n/**\r\n * MinMaxSelect component- creates select element for given min max value with label\r\n * @function MinMaxSelect\r\n *\r\n * @param {MinMaxSelectProps} props\r\n * @constructor\r\n *\r\n * @return {JSX.Element}\r\n */\r\nconst MinMaxSelect = (props: MinMaxSelectProps): JSX.Element => {\r\n    const {min, max, value, label, onChange} = props;\r\n    const initValue: number[] = [];\r\n    const [values, setValues] = React.useState(initValue);\r\n\r\n    React.useEffect(() => {\r\n        let values: number[] = Array.from({length: Math.max(0, max - min + 1)}, (_, i: number) => i + min);\r\n        setValues(values);\r\n    }, [min, max]);\r\n\r\n    return (\r\n        <div data-test='component-min-max-select' className=\"form-group\">\r\n            <label data-test='select-label'>{label}</label>\r\n            <select data-test='select-element' value={value} className=\"form-control\"\r\n                    onChange={((event: React.ChangeEvent<HTMLSelectElement>) => onChange(parseInt(event.target.value)))}>\r\n                {\r\n                    values.map((v: number) => (\r\n                        <option key={v} value={v} data-test=\"select-option\">{v}</option>\r\n                    ))\r\n                }\r\n            </select>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MinMaxSelect;\r\n","import {createGrid, GameState, getColors, TileColor, TileGrid} from \"common\";\r\nimport React from \"react\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\nimport CONFIG from \"../config\";\r\nimport {autoSolve, newGame, solveNextMove} from \"../redux/actions\";\r\n\r\nimport {RootState} from \"../redux/store\";\r\nimport MinMaxSelect from \"./min-max-select\";\r\n\r\nconst mapStateToProps = ({initialGrid, colors, gameState, moves}: RootState) => ({\r\n    initialGrid, colors, gameState, moves\r\n});\r\n\r\nconst connector = connect(mapStateToProps, {newGame, solveNextMove, autoSolve});\r\n\r\nexport type NavBarProps = ConnectedProps<typeof connector>;\r\n\r\n/**\r\n * NavBar component - renders inputs and buttons\r\n * @function DisconnectedNavBar\r\n *\r\n * @param {NavBarProps} props\r\n * @constructor\r\n *\r\n * @return {JSX.Element}\r\n */\r\nexport const DisconnectedNavBar = (props: NavBarProps): JSX.Element => {\r\n    const {newGame, solveNextMove, autoSolve, initialGrid, colors, moves, gameState}: NavBarProps = props;\r\n    const {rows, minRows, maxRows, columns, minColumns, maxColumns, colorsCnt, minColorsCnt, maxColorsCnt} = CONFIG;\r\n    const [rowsVal, setRows] = React.useState(rows);\r\n    const [columnsVal, setColumns] = React.useState(columns);\r\n    const [colorsCntVal, setColorsCnt] = React.useState(colorsCnt);\r\n    const [isNavBarCollapsed, setNavBarCollapsed] = React.useState(false);\r\n    const bDisabled: boolean = (gameState === GameState.AUTO_SOLVE);\r\n\r\n    const startGameHandler = (): void => {\r\n        const newColors: TileColor[] = getColors(colorsCntVal);\r\n        const grid: TileGrid = createGrid(rowsVal, columnsVal, newColors);\r\n        newGame(grid, newColors);\r\n    };\r\n\r\n    const restartGameHandler = (): void => {\r\n        if (initialGrid) {\r\n            newGame(initialGrid, colors);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <nav data-test=\"component-header-inputs\" className=\"navbar d-block navbar-expand-lg navbar-light bg-light\">\r\n            <div className=\"d-flex w-100\">\r\n                <span className=\"navbar-brand flex-1\">Tiles Color Game</span>\r\n                <button className={\"navbar-toggler\" + (isNavBarCollapsed ? \" collapsed\" : \"\")} type=\"button\"\r\n                        data-test=\"navbar-collapse-btn\"\r\n                        data-toggle=\"collapse\"\r\n                        data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\"\r\n                        aria-expanded={isNavBarCollapsed}\r\n                        aria-label=\"Toggle navigation\"\r\n                        onClick={() => setNavBarCollapsed(!isNavBarCollapsed)}\r\n                >\r\n                    <span className=\"navbar-toggler-icon\"/>\r\n                </button>\r\n            </div>\r\n\r\n            <div className={\"collapse navbar-collapse\" + (isNavBarCollapsed ? \"\" : \" show\")}\r\n                 id=\"navbarSupportedContent\">\r\n                <div className=\"form-row w-100 align-items-end\">\r\n                    <div className=\"col-md-2\">\r\n                        <MinMaxSelect data-test=\"header-inputs-rows\" min={minRows} max={maxRows} value={rowsVal}\r\n                                      label={\"Rows\"}\r\n                                      onChange={setRows}/>\r\n                    </div>\r\n                    <div className=\"col-md-2\">\r\n                        <MinMaxSelect data-test=\"header-inputs-columns\" min={minColumns} max={maxColumns}\r\n                                      value={columnsVal}\r\n                                      label={\"Columns\"}\r\n                                      onChange={setColumns}/>\r\n                    </div>\r\n                    <div className=\"col-md-2\">\r\n                        <MinMaxSelect data-test=\"header-inputs-colors\" min={minColorsCnt} max={maxColorsCnt}\r\n                                      value={colorsCntVal} label={\"Colors\"}\r\n                                      onChange={setColorsCnt}/>\r\n                    </div>\r\n\r\n                    <div className=\"col-md-6\">\r\n                        <button data-test=\"new-game-button\" type=\"button\" className=\"btn btn-primary m-1 mb-3\"\r\n                                onClick={() => startGameHandler()} disabled={bDisabled}>New game\r\n                        </button>\r\n\r\n                        <button data-test=\"restart-game-button\" type=\"button\" className=\"btn btn-primary m-1 mb-3\"\r\n                                onClick={() => restartGameHandler()}\r\n                                disabled={bDisabled || gameState === GameState.NOT_STARTED || !moves.length}>Restart\r\n                            game\r\n                        </button>\r\n                        <button data-test=\"solve-next-move-button\" type=\"button\" className=\"btn btn-primary m-1 mb-3\"\r\n                                onClick={() => solveNextMove()}\r\n                                disabled={bDisabled || gameState !== GameState.IN_PROGRESS}>Solve\r\n                            next move\r\n                        </button>\r\n                        <button data-test=\"solve-game-button\" type=\"button\" className=\"btn btn-primary m-1 mb-3\"\r\n                                onClick={() => autoSolve()}\r\n                                disabled={bDisabled || gameState !== GameState.IN_PROGRESS}>Solve game\r\n                        </button>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nconst NavBar = connector(DisconnectedNavBar);\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\n\r\nexport interface ToastMessageProps {\r\n    header: string;\r\n    body: string;\r\n    onClose: () => void;\r\n}\r\n\r\n/**\r\n * ToastMessage component - renders toast message\r\n * @function ToastMessage\r\n *\r\n * @param {ToastMessageProps} props\r\n * @constructor\r\n *\r\n * @return {JSX.Element}\r\n */\r\nconst ToastMessage = (props: ToastMessageProps) => {\r\n    const {header, body, onClose}: ToastMessageProps = props;\r\n\r\n    return (\r\n        <div data-test=\"component-toast-message\" className=\"toast show fade bg-danger text-white\" role=\"alert\"\r\n             aria-live=\"assertive\" aria-atomic=\"true\"\r\n             style={{position: \"fixed\", right: \"5px\", bottom: \"5px\", minWidth: \"200px\", zIndex: 1}}>\r\n            <div className=\"toast-header bg-danger text-white\">\r\n                <strong data-test=\"toast-header\" className=\"mr-auto\">{header}</strong>\r\n                <button data-test=\"toast-close-button\" type=\"button\" className=\"ml-2 mb-1 close text-white\"\r\n                        data-dismiss=\"toast\"\r\n                        aria-label=\"Close\" onClick={() => onClose()}>\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n            </div>\r\n            <div data-test=\"toast-body\" className=\"toast-body\">\r\n                {body}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ToastMessage;\r\n","import {GameState} from \"common\";\r\nimport React, {MutableRefObject, useRef} from \"react\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\nimport {ColorPicker, GameGrid, GameHistory} from \"../components\";\r\nimport {solveGame} from \"../redux/actions\";\r\nimport {RootState} from \"../redux/store\";\r\n\r\nconst mapStateToProps = ({initialGrid, grid, gameState, moves, aiMoves}: RootState) => ({\r\n    initialGrid, grid, gameState, moves, aiMoves\r\n});\r\n\r\nconst connector = connect(mapStateToProps, {solveGame});\r\n\r\nexport type GameProps = ConnectedProps<typeof connector>;\r\n\r\n/**\r\n * DisconnectedGame component - renders game board, color pickers\r\n * @function DisconnectedGame\r\n *\r\n * @param {GameProps} props\r\n * @constructor\r\n *\r\n * {JSX.Element | null}\r\n */\r\nexport const DisconnectedGame = (props: GameProps): JSX.Element | null => {\r\n    const {initialGrid, grid, gameState, moves, aiMoves, solveGame}: GameProps = props;\r\n    const alertRef: MutableRefObject<HTMLDivElement | null> = useRef(null);\r\n    const historyRef: MutableRefObject<HTMLDivElement | null> = useRef(null);\r\n    const bSolved: boolean = gameState === GameState.SOLVED;\r\n    React.useEffect(() => {\r\n        setTimeout(() => {\r\n            if (alertRef.current && bSolved) {\r\n                alertRef.current.scrollIntoView({behavior: \"smooth\"});\r\n            }\r\n\r\n            if (historyRef.current && aiMoves) {\r\n                historyRef.current.scrollIntoView({behavior: \"smooth\"});\r\n            }\r\n\r\n        });\r\n    }, [bSolved, aiMoves])\r\n\r\n    if (!grid) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div data-test=\"component-game\" className=\"game\">\r\n            <div className=\"row\">\r\n                <div className=\"col-lg-8 d-flex justify-content-center main-game-board\">\r\n                    <GameGrid data-test=\"game-grid\" grid={grid}/>\r\n                </div>\r\n                <div className=\"col-lg-4 d-flex flex-1 flex-column text-center justify-content-center align-self-start\">\r\n                    <ColorPicker data-test=\"color-picker\"/>\r\n                    <h5 className=\"border-1 m-2\"><b>Moves:</b>&nbsp;<span data-test=\"moves-cnt\">{moves.length}</span>\r\n                    </h5>\r\n                </div>\r\n            </div>\r\n            {bSolved ?\r\n                <div ref={alertRef} className=\"alert alert-success text-center mb-3 mt-3\">\r\n                    <h5 data-test=\"success-alert\">Congrats! You have solved this game.</h5>\r\n                    <button data-test=\"solve-game-button\" className=\"btn btn-primary\" onClick={() => solveGame()}>\r\n                        Compare with automated\r\n                    </button>\r\n                </div> : null}\r\n\r\n            {\r\n                bSolved && aiMoves && initialGrid ?\r\n                    <div ref={historyRef}>\r\n                        <div className=\"d-flex text-center\">\r\n                            <div className=\"flex-1\">\r\n                                <b data-test=\"your-history-label\">\r\n                                    Yours<br/>(Moves: <span data-test=\"your-history-move-count\">{moves.length}</span>)\r\n                                </b>\r\n                            </div>\r\n                            <div className=\"flex-1\">\r\n                                <b data-test=\"ai-history-label\">\r\n                                    Automated<br/>(Moves: <span\r\n                                    data-test=\"ai-history-move-count\">{aiMoves.length}</span>)</b>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"d-flex\">\r\n                            <div className=\"flex-1 p-2\">\r\n\r\n                                <GameHistory data-test=\"your-history\" grid={initialGrid} moves={moves}/>\r\n                            </div>\r\n                            <div className=\"flex-1 p-2\">\r\n\r\n                                <GameHistory data-test=\"ai-history\" grid={initialGrid} moves={aiMoves}/>\r\n                            </div>\r\n                        </div>\r\n                    </div> : null\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Game = connector(DisconnectedGame);\r\n\r\nexport default Game;\r\n","import {GameState} from \"common\";\r\nimport React from \"react\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\n\r\nimport \"./App.css\";\r\nimport {NavBar, ToastMessage} from \"./components\";\r\n\r\nimport {Game} from \"./pages\";\r\nimport {setNoServerError} from \"./redux/actions\";\r\n\r\nimport {RootState} from \"./redux/store\";\r\n\r\nconst mapStateToProps = ({gameState, serverError}: RootState) => ({\r\n    gameState, serverError\r\n});\r\n\r\nconst connector = connect(mapStateToProps, {setNoServerError});\r\n\r\nexport type AppProps = ConnectedProps<typeof connector>;\r\n\r\n/**\r\n * App component\r\n * @function DisconnectedApp\r\n *\r\n * @param {AppProps} props\r\n * @constructor\r\n *\r\n * @return {JSX.Element}\r\n */\r\nexport const DisconnectedApp = (props: AppProps): JSX.Element => {\r\n    const {gameState, serverError, setNoServerError}: AppProps = props;\r\n\r\n    return (\r\n        <div data-test=\"component-app\">\r\n\r\n            {serverError ?\r\n                <ToastMessage data-test=\"toast-message\" header=\"Error!\" body=\"Server error!\"\r\n                              onClose={setNoServerError}/>\r\n                : null}\r\n            <NavBar data-test=\"header-inputs\"/>\r\n            {(gameState !== GameState.NOT_STARTED) ?\r\n                <div className=\"container p-4\"><Game data-test=\"game\"/></div> : null}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst App = connector(DisconnectedApp);\r\n\r\nexport default App;\r\n","import {TileColor} from \"common\";\r\nimport {GameActions, NEW_GAME, SOLVE_GAME} from \"../action-types\";\r\n\r\nconst initialState: TileColor[] | null = null;\r\n\r\n/**\r\n * @function AiMovesReducer\r\n *\r\n * @param {TileColor[]} state - State before reducer.\r\n * @param {GameActions} action - Action sent to reducer.\r\n *\r\n * @returns {TileColor[]} - New state.\r\n */\r\nconst AiMovesReducer = (state: TileColor[] | null = initialState, action: GameActions) => {\r\n    switch (action.type) {\r\n        case NEW_GAME:\r\n            return initialState;\r\n        case SOLVE_GAME:\r\n            return action.payload.colors;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default AiMovesReducer;\r\n","import {TileColor} from \"common\";\r\nimport {GameActions, NEW_GAME} from \"../action-types\";\r\n\r\nconst initialState: TileColor[] = [];\r\n\r\n/**\r\n * @function ColorsReducer\r\n *\r\n * @param {TileColor[]} state - State before reducer.\r\n * @param {GameActions} action - Action sent to reducer.\r\n *\r\n * @returns {TileColor[]} - New state.\r\n */\r\nconst ColorsReducer = (state: TileColor[] = initialState, action: GameActions) => {\r\n    switch (action.type) {\r\n        case NEW_GAME:\r\n            return action.payload.colors;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default ColorsReducer;\r\n","import {GameState} from \"common\";\r\nimport {AUTO_SOLVE, AUTO_SOLVED, GameActions, NEW_GAME, SOLVED} from \"../action-types\";\r\n\r\nconst initialState: GameState = GameState.NOT_STARTED;\r\n\r\n/**\r\n * @function GameStateReducer\r\n *\r\n * @param {GameState} state - State before reducer.\r\n * @param {GameActions} action - Action sent to reducer.\r\n *\r\n * @returns {GameState} - New state.\r\n */\r\nconst GameStateReducer = (state: GameState = initialState, action: GameActions) => {\r\n    switch (action.type) {\r\n        case NEW_GAME:\r\n            return GameState.IN_PROGRESS;\r\n        case AUTO_SOLVE:\r\n            return GameState.AUTO_SOLVE;\r\n        case SOLVED:\r\n            return GameState.SOLVED;\r\n        case AUTO_SOLVED:\r\n            return GameState.AUTO_SOLVED;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default GameStateReducer;\r\n","import {TileGrid} from \"common\";\r\nimport {ADD_MOVE, GameActions, NEW_GAME} from \"../action-types\";\r\n\r\nconst initialState: TileGrid | null = null;\r\n\r\n/**\r\n * @function GridReducer\r\n *\r\n * @param {TileGrid | null} state - State before reducer.\r\n * @param {GameActions} action - Action sent to reducer.\r\n *\r\n * @returns {TileGrid | null} - New state.\r\n */\r\nconst GridReducer = (state: TileGrid | null = initialState, action: GameActions) => {\r\n    switch (action.type) {\r\n        case NEW_GAME:\r\n            return action.payload.grid;\r\n        case ADD_MOVE:\r\n            return action.payload.grid;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default GridReducer;\r\n","import {TileGrid} from \"common\";\r\nimport {GameActions, NEW_GAME} from \"../action-types\";\r\n\r\nconst initialState: TileGrid | null = null;\r\n\r\n/**\r\n * @function InitialGridReducer\r\n *\r\n * @param {TileGrid | null} state - State before reducer.\r\n * @param {GameActions} action - Action sent to reducer.\r\n *\r\n * @returns {TileGrid | null} - New state.\r\n */\r\nconst InitialGridReducer = (state: TileGrid | null = initialState, action: GameActions) => {\r\n    switch (action.type) {\r\n        case NEW_GAME:\r\n            return action.payload.grid;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default InitialGridReducer;\r\n","import {TileColor} from \"common\";\r\nimport {ADD_MOVE, GameActions, NEW_GAME} from \"../action-types\";\r\n\r\nconst initialState: TileColor[] = [];\r\n\r\n/**\r\n * @function MovesReducer\r\n *\r\n * @param {TileColor[]} state - State before reducer.\r\n * @param {GameActions} action - Action sent to reducer.\r\n *\r\n * @returns {TileColor[]} - New state.\r\n */\r\nconst MovesReducer = (state: TileColor[] = initialState, action: GameActions) => {\r\n    switch (action.type) {\r\n        case NEW_GAME:\r\n            return initialState;\r\n        case ADD_MOVE:\r\n            return [...state, action.payload.color];\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default MovesReducer;\r\n","import {TileColor} from \"common\";\r\nimport {ADD_MOVE, AUTO_SOLVED, GameActions, NEW_GAME, SOLVE_NEXT_MOVE, SOLVED} from \"../action-types\";\r\n\r\nconst initialState: TileColor | null = null;\r\n\r\n/**\r\n * @function NextMoveReducer\r\n *\r\n * @param {TileColor | null} state - State before reducer.\r\n * @param {GameActions} action - Action sent to reducer.\r\n * @returns {TileColor | null} - New state.\r\n */\r\nconst NextMoveReducer = (state: TileColor | null = initialState, action: GameActions) => {\r\n    switch (action.type) {\r\n        case NEW_GAME:\r\n        case ADD_MOVE:\r\n        case SOLVED:\r\n        case AUTO_SOLVED:\r\n            return initialState;\r\n        case SOLVE_NEXT_MOVE:\r\n            return action.payload.color;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default NextMoveReducer;\r\n","import {GameActions, NEW_GAME, NO_SERVER_ERROR, SERVER_ERROR} from \"../action-types\";\r\n\r\nconst initialState: boolean = false;\r\n\r\n/**\r\n * @function ServerErrorReducer\r\n *\r\n * @param {boolean} state - State before reducer.\r\n * @param {GameActions} action - Action sent to reducer.\r\n *\r\n * @returns {boolean} - New state.\r\n */\r\nconst ServerErrorReducer = (state: boolean = initialState, action: GameActions): boolean => {\r\n    switch (action.type) {\r\n        case NEW_GAME:\r\n            return initialState;\r\n        case SERVER_ERROR:\r\n            return true;\r\n        case NO_SERVER_ERROR:\r\n            return false;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default ServerErrorReducer;\r\n","import {combineReducers} from \"redux\";\r\nimport AiMovesReducer from \"./ai-moves-reducer\";\r\nimport ColorsReducer from \"./colors-reducer\";\r\nimport GameStateReducer from \"./game-state-reducer\";\r\nimport GridReducer from \"./grid-reducer\";\r\nimport InitialGridReducer from \"./initial-grid-reducer\";\r\nimport MovesReducer from \"./moves-reducer\";\r\nimport NextMoveReducer from \"./next-move-reducer\";\r\nimport ServerErrorReducer from \"./server-error-reducer\";\r\n\r\nexport default combineReducers({\r\n    aiMoves: AiMovesReducer,\r\n    colors: ColorsReducer,\r\n    gameState: GameStateReducer,\r\n    grid: GridReducer,\r\n    initialGrid: InitialGridReducer,\r\n    moves: MovesReducer,\r\n    nextMove: NextMoveReducer,\r\n    serverError: ServerErrorReducer\r\n});\r\n","import {applyMiddleware, createStore} from \"redux\";\r\nimport ReduxThunk from \"redux-thunk\";\r\nimport rootReducer from \"../reducers\";\r\n\r\nexport const middlewares = [ReduxThunk];\r\nconst createStoreWithMiddleware = applyMiddleware(...middlewares)(createStore);\r\n\r\nconst store = createStoreWithMiddleware(rootReducer);\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport default store;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        \"This web app is being served cache-first by a service \" +\r\n                        \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === \"installed\") {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                \"New content is available and will be used when all \" +\r\n                                \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log(\"Content is cached for offline use.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error(\"Error during service worker registration:\", error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: {\"Service-Worker\": \"script\"},\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get(\"content-type\");\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                \"No internet connection found. App is running in offline mode.\"\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if (\"serviceWorker\" in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {Provider} from \"react-redux\";\nimport App from \"./App\";\n\nimport \"./index.css\";\nimport store from \"./redux/store\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}